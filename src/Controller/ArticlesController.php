<?php
/**
 * Created by PhpStorm.
 * User: wpanderson
 * Date: 9/19/18
 * Time: 1:29 PM
 */
// src/Controller/ArticlesController.php

namespace App\Controller;

class ArticlesController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadComponent('Paginator');
        // Flash allows for notifications.
        $this->loadComponent('Flash');
    }

    public function index()
    {
        $this->loadComponent('Paginator');
        $articles = $this->Paginator->paginate($this->Articles->find());
        $this->set(compact('articles'));
    }

    // When user clicks a slug allow them to view the article.
    public function view($slug = null)
    {
        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        $this->set(compact('article'));
    }

    // Add action for allowing users to add their own articles
    public function add()
    {
        // PHP if statement
        $article = $this->Articles->newEntity();
        if ($this->request->is('post')) {
            // Debug to print stuff
            debug($this->request->getData());
            $article = $this->Articles->patchEntity($article, $this->request->getData());

            // Hardcoding user_id is temporary and will be changed with authenticator
            $article->user_id = 1;

            // Attempts to save an article if success notifies user and redirects
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('Your article has been saved.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('Unable to add your article. :('));

        }
        // Set article for use inside the template.
        $this->set('article', $article);
    }

    // Add the ability to Edit Articles.
    public function edit($slug)
    {
        /**
         * This action first ensures that the user has tried to access an existing record. If they havenâ€™t passed in
         * an $slug parameter, or the article does not exist, a NotFoundException will be thrown, and the CakePHP
         * ErrorHandler will render the appropriate error page.

            Next the action checks whether the request is either a POST or a PUT request. If it is, then we use the
         * POST/PUT data to update our article entity by using the patchEntity() method. Finally, we call save() set
         * the appropriate flash message and either redirect or display validation errors.
         */
        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        if ($this->request->is(['post', 'put'])) {
            $this->Articles->patchEntity($article, $this->request->getData());
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('Your article has been updated.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('Unable to update your article.'));
        }

        $this->set('article', $article);
    }

    // Add ability to delete Articles.
    public function delete($slug)
    {
        // Validates that only post or delete methods can use this function.
        $this->request->allowMethod(['post', 'delete']);

        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        if ($this->Articles->delete($article)) {
            $this->Flash->success(__('The {0} article has been deleted.', $article->title));
            return $this->redirect(['action' => 'index']);
        }
    }
}
